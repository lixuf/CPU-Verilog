`include "gen_defines.v"

module ex_disp(
//连接至ALU的接口
  //icb通讯握手信号
  output disp_o_alu_valid,//发送至alu，请求读写信号
  input  disp_o_alu_ready,//来自alu，请求读写准许信号

  input  disp_o_alu_longpipe,//???
  //操作数
  output [`E203_XLEN-1:0] disp_o_alu_rs1,
  output [`E203_XLEN-1:0] disp_o_alu_rs2,
  //指令的其他信息
  output disp_o_alu_rdwen,//表示该指令是否写回结果寄存器
  output [`E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,//表明该指令写回的结果寄存器索引
  output [`E203_DECINFO_WIDTH-1:0]  disp_o_alu_info,//指令的信息  
  output [`E203_XLEN-1:0] disp_o_alu_imm,//该指令的立即数字段
  output [`E203_PC_SIZE-1:0] disp_o_alu_pc,//该指令的pc
  output [`E203_ITAG_WIDTH-1:0] disp_o_alu_itag,//???
  output disp_o_alu_misalgn,//该指令取指时发生了非对齐错误
  output disp_o_alu_buserr ,//该指令取值时发生了存储器访问错误
  output disp_o_alu_ilegl  ,//该指令是一条非法指令
);
//派遣条件信号--当不符合条件时，派遣点会被阻塞
wire disp_condition = 
                 (disp_csr ? oitf_empty : 1'b1)
               & (disp_fence_fencei ? oitf_empty : 1'b1)
               & (~wfi_halt_exu_req)   
               & (~dep)   
               & (disp_alu_longp_prdt ? disp_oitf_ready : 1'b1);
		//disp_csr 表明是否访问crs，若访问需等待oitf为空(oitf_empty)，oitf为空代表长指令执行完毕
		//disp_fence_fencei 表明是否有Fence和FenceI指令发生，若发生需要等待oitf为空即长指令执行完毕，因为Fence
		//                  和FenceI分别为屏障和同步指令，目的是将前面以及执行的指令执行完，即写入存储器在使后面
		//                  的指令执行，后者还会冲刷掉流水线
		//wfi_halt_exu_req 表明是否由WFI指令发生，WFI为等待中断指令，该cpu指定为睡眠等待指令，需要停止工作并睡眠
		//dep 表示是否发生数据冲突，发生则阻塞
		//disp_alu_longp_prdt 表明是否有长指令发生
		//     disp_oitf_ready 表明oitf是否有空，因为派遣长指令时需要分配oitf表项，无资源时必须等待

		
//至ALU，该模块相当于桥梁，握手信号均来自译码器
    //握手
wire   disp_i_ready_pos = disp_o_alu_ready;//从alu输入的读写准许信号，会与其他信号逻辑运算后直接送回解码器

wire disp_i_valid_pos; 
assign disp_i_valid_pos = disp_condition & disp_i_valid;//解码器送来的读写请求信号
assign disp_o_alu_valid = disp_i_valid_pos;//向alu输出的读写请求信号，由解码器送来
	//其他信息，在module中有说明
assign disp_o_alu_rs1   = disp_i_rs1_msked;
assign disp_o_alu_rs2   = disp_i_rs2_msked;
assign disp_o_alu_rdwen = disp_i_rdwen;
assign disp_o_alu_rdidx = disp_i_rdidx;
assign disp_o_alu_info  = disp_i_info; 
assign disp_o_alu_imm  = disp_i_imm;
assign disp_o_alu_pc   = disp_i_pc;
assign disp_o_alu_itag = disp_oitf_ptr;
assign disp_o_alu_misalgn= disp_i_misalgn;
assign disp_o_alu_buserr = disp_i_buserr ;
assign disp_o_alu_ilegl  = disp_i_ilegl  ;
